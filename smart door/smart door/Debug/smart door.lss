
smart door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000372  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00000372  000003e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c0e  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006af  00000000  00000000  0000114e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e5  00000000  00000000  000017fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039e  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000545  00000000  00000000  0000214a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000268f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3f       	cpi	r26, 0xFC	; 252
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  7a:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:
#define LCD_CTRL_PORT PORTC
#define RS_PIN PC0
#define RW_PIN PC1
#define E_PIN  PC2
void LCD_Command(unsigned char x){
	LCD_DATA_PORT=x;
  82:	82 bb       	out	0x12, r24	; 18
	LCD_CTRL_PORT&=~(1<<RS_PIN);
  84:	85 b3       	in	r24, 0x15	; 21
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	85 bb       	out	0x15, r24	; 21
	LCD_CTRL_PORT&=~(1<<RW_PIN);
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	85 bb       	out	0x15, r24	; 21
	LCD_CTRL_PORT|=(1<<E_PIN);
  90:	85 b3       	in	r24, 0x15	; 21
  92:	84 60       	ori	r24, 0x04	; 4
  94:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	89 ef       	ldi	r24, 0xF9	; 249
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_Command+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_Command+0x1e>
  a0:	00 00       	nop
	_delay_ms(1);
	LCD_CTRL_PORT&=~(1<<E_PIN);
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	8b 7f       	andi	r24, 0xFB	; 251
  a6:	85 bb       	out	0x15, r24	; 21
  a8:	08 95       	ret

000000aa <LCD_data>:
	
	
}
void LCD_data( char data){
	LCD_DATA_PORT=data;
  aa:	82 bb       	out	0x12, r24	; 18
	LCD_CTRL_PORT|=(1<<RS_PIN);
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	85 bb       	out	0x15, r24	; 21
	LCD_CTRL_PORT&=~(1<<RW_PIN);
  b2:	85 b3       	in	r24, 0x15	; 21
  b4:	8d 7f       	andi	r24, 0xFD	; 253
  b6:	85 bb       	out	0x15, r24	; 21
	LCD_CTRL_PORT|=(1<<E_PIN);
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	85 bb       	out	0x15, r24	; 21
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_data+0x18>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_data+0x1e>
  c8:	00 00       	nop
	_delay_ms(1);
	LCD_CTRL_PORT&=~(1<<E_PIN);
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	89 ef       	ldi	r24, 0xF9	; 249
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_data+0x2a>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_data+0x30>
  da:	00 00       	nop
  dc:	08 95       	ret

000000de <LCD_string>:
	_delay_ms(1);
	
}

void LCD_string(const char *str){
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	8c 01       	movw	r16, r24
	for (int i=0;str[i]!='\0';i++)
  e8:	c0 e0       	ldi	r28, 0x00	; 0
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	09 c0       	rjmp	.+18     	; 0x100 <LCD_string+0x22>
	{
		LCD_data(str[i]);
  ee:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_data>
  f2:	87 ea       	ldi	r24, 0xA7	; 167
  f4:	91 e6       	ldi	r25, 0x61	; 97
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_string+0x18>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCD_string+0x1e>
  fc:	00 00       	nop
	_delay_ms(1);
	
}

void LCD_string(const char *str){
	for (int i=0;str[i]!='\0';i++)
  fe:	21 96       	adiw	r28, 0x01	; 1
 100:	f8 01       	movw	r30, r16
 102:	ec 0f       	add	r30, r28
 104:	fd 1f       	adc	r31, r29
 106:	80 81       	ld	r24, Z
 108:	81 11       	cpse	r24, r1
 10a:	f1 cf       	rjmp	.-30     	; 0xee <LCD_string+0x10>
	{
		LCD_data(str[i]);
		_delay_ms(100);
	}
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <LCD_init>:

void LCD_init(){
	DDRD=0xff;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	81 bb       	out	0x11, r24	; 17
	DDRC|=(1<<RS_PIN)|(1<<RW_PIN)|(1<<E_PIN);
 11a:	84 b3       	in	r24, 0x14	; 20
 11c:	87 60       	ori	r24, 0x07	; 7
 11e:	84 bb       	out	0x14, r24	; 20
 120:	87 e8       	ldi	r24, 0x87	; 135
 122:	93 e1       	ldi	r25, 0x13	; 19
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_init+0xe>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_init+0x14>
 12a:	00 00       	nop
	_delay_ms(20);
	LCD_Command(0x38);
 12c:	88 e3       	ldi	r24, 0x38	; 56
 12e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x0E);
 132:	8e e0       	ldi	r24, 0x0E	; 14
 134:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x01);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 13e:	83 ef       	ldi	r24, 0xF3	; 243
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_init+0x2c>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_init+0x32>
 148:	00 00       	nop
 14a:	08 95       	ret

0000014c <readKeypad>:

// Function to read the pressed key on the keypad
char readKeypad() {
	while (1) {
		// Loop through the columns
		for (u8 col = 0; col < 4; col++) {
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	37 c0       	rjmp	.+110    	; 0x1be <readKeypad+0x72>
			// Set data direction for columns and activate a single column
			KEYPAD_DDR = KEYPAD_COL_MASK;
 150:	80 ef       	ldi	r24, 0xF0	; 240
 152:	8a bb       	out	0x1a, r24	; 26
			KEYPAD_PORT = ~(1 << (col + 4));  // Shift to the correct column position
 154:	43 2f       	mov	r20, r19
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	ba 01       	movw	r22, r20
 15a:	6c 5f       	subi	r22, 0xFC	; 252
 15c:	7f 4f       	sbci	r23, 0xFF	; 255
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <readKeypad+0x1c>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <readKeypad+0x18>
 16c:	80 95       	com	r24
 16e:	8b bb       	out	0x1b, r24	; 27

			// Check each row for a pressed key
			for (u8 row = 0; row < 4; row++) {
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	22 c0       	rjmp	.+68     	; 0x1b8 <readKeypad+0x6c>
				// If a key is pressed in the current row
				if (!(KEYPAD_PIN & (1 << row))) {
 174:	89 b3       	in	r24, 0x19	; 25
 176:	62 2f       	mov	r22, r18
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 2e       	mov	r0, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <readKeypad+0x38>
 180:	95 95       	asr	r25
 182:	87 95       	ror	r24
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <readKeypad+0x34>
 188:	80 fd       	sbrc	r24, 0
 18a:	15 c0       	rjmp	.+42     	; 0x1b6 <readKeypad+0x6a>
					// Wait for key release
					while (!(KEYPAD_PIN & (1 << row)));
 18c:	89 b3       	in	r24, 0x19	; 25
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	06 2e       	mov	r0, r22
 192:	02 c0       	rjmp	.+4      	; 0x198 <readKeypad+0x4c>
 194:	95 95       	asr	r25
 196:	87 95       	ror	r24
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <readKeypad+0x48>
 19c:	80 ff       	sbrs	r24, 0
 19e:	f6 cf       	rjmp	.-20     	; 0x18c <readKeypad+0x40>
					// Return the corresponding character from the keypad matrix
					return keypad[row][col];
 1a0:	66 0f       	add	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	66 0f       	add	r22, r22
 1a6:	77 1f       	adc	r23, r23
 1a8:	60 5a       	subi	r22, 0xA0	; 160
 1aa:	7f 4f       	sbci	r23, 0xFF	; 255
 1ac:	fb 01       	movw	r30, r22
 1ae:	e4 0f       	add	r30, r20
 1b0:	f5 1f       	adc	r31, r21
 1b2:	80 81       	ld	r24, Z
 1b4:	08 95       	ret
			// Set data direction for columns and activate a single column
			KEYPAD_DDR = KEYPAD_COL_MASK;
			KEYPAD_PORT = ~(1 << (col + 4));  // Shift to the correct column position

			// Check each row for a pressed key
			for (u8 row = 0; row < 4; row++) {
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
 1b8:	24 30       	cpi	r18, 0x04	; 4
 1ba:	e0 f2       	brcs	.-72     	; 0x174 <readKeypad+0x28>

// Function to read the pressed key on the keypad
char readKeypad() {
	while (1) {
		// Loop through the columns
		for (u8 col = 0; col < 4; col++) {
 1bc:	3f 5f       	subi	r19, 0xFF	; 255
 1be:	34 30       	cpi	r19, 0x04	; 4
 1c0:	38 f2       	brcs	.-114    	; 0x150 <readKeypad+0x4>
 1c2:	c4 cf       	rjmp	.-120    	; 0x14c <readKeypad>

000001c4 <keypad_scan>:
	}
	return 0;  // This line should technically never be reached
}

// Function to scan the keypad and store the pressed keys in an array
void keypad_scan(char* input, u8 length) {
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	7c 01       	movw	r14, r24
 1d2:	d6 2f       	mov	r29, r22
	for (u8 i = 0; i < length; i++) {
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	13 c0       	rjmp	.+38     	; 0x1fe <keypad_scan+0x3a>
		input[i] = readKeypad();  // Read the pressed key
 1d8:	87 01       	movw	r16, r14
 1da:	0c 0f       	add	r16, r28
 1dc:	11 1d       	adc	r17, r1
 1de:	0e 94 a6 00 	call	0x14c	; 0x14c <readKeypad>
 1e2:	f8 01       	movw	r30, r16
 1e4:	80 83       	st	Z, r24
		LCD_data(input[i]);       // Display the pressed key on the LCD
 1e6:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_data>
 1ea:	ff e5       	ldi	r31, 0x5F	; 95
 1ec:	2a ee       	ldi	r18, 0xEA	; 234
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	f1 50       	subi	r31, 0x01	; 1
 1f2:	20 40       	sbci	r18, 0x00	; 0
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <keypad_scan+0x2c>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <keypad_scan+0x36>
 1fa:	00 00       	nop
	return 0;  // This line should technically never be reached
}

// Function to scan the keypad and store the pressed keys in an array
void keypad_scan(char* input, u8 length) {
	for (u8 i = 0; i < length; i++) {
 1fc:	cf 5f       	subi	r28, 0xFF	; 255
 1fe:	cd 17       	cp	r28, r29
 200:	58 f3       	brcs	.-42     	; 0x1d8 <keypad_scan+0x14>
		input[i] = readKeypad();  // Read the pressed key
		LCD_data(input[i]);       // Display the pressed key on the LCD
		_delay_ms(300);           // Debounce delay
	}
	input[length] = '\0'; // Null-terminate the string
 202:	f7 01       	movw	r30, r14
 204:	ed 0f       	add	r30, r29
 206:	f1 1d       	adc	r31, r1
 208:	10 82       	st	Z, r1
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
 216:	08 95       	ret

00000218 <main>:
#include "Lcd.h"
#include "Keybad.h"
#include <string.h>

int main(void)
{   DDRB=0xff;
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	cd 55       	subi	r28, 0x5D	; 93
 222:	d1 09       	sbc	r29, r1
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	87 bb       	out	0x17, r24	; 23
	char userID[3];
	char inputPassword[5];
	char correctPassword[5] = "1234";
 232:	85 e0       	ldi	r24, 0x05	; 5
 234:	e7 ef       	ldi	r30, 0xF7	; 247
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	de 01       	movw	r26, r28
 23a:	19 96       	adiw	r26, 0x09	; 9
 23c:	01 90       	ld	r0, Z+
 23e:	0d 92       	st	X+, r0
 240:	8a 95       	dec	r24
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x24>
	char userInfo[4][2][10] = {
 244:	80 e5       	ldi	r24, 0x50	; 80
 246:	e0 e7       	ldi	r30, 0x70	; 112
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	de 01       	movw	r26, r28
 24c:	1e 96       	adiw	r26, 0x0e	; 14
 24e:	01 90       	ld	r0, Z+
 250:	0d 92       	st	X+, r0
 252:	8a 95       	dec	r24
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0x36>
		{"02", "John"},
		{"03", "Rahaf"},
		{"04", "Tifa"}
	};

	LCD_init();
 256:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_init>
	
	while (1)
	{
		// Prompt for password
		LCD_Command(0x80); // Set cursor to the beginning of the first line
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
		LCD_string("Password:");
 260:	80 ec       	ldi	r24, 0xC0	; 192
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 6f 00 	call	0xde	; 0xde <LCD_string>
		keypad_scan(inputPassword, 4); // Get the 4-digit password
 268:	64 e0       	ldi	r22, 0x04	; 4
 26a:	ce 01       	movw	r24, r28
 26c:	04 96       	adiw	r24, 0x04	; 4
 26e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <keypad_scan>

		// Check if the password is correct
		if (strcmp(inputPassword, correctPassword) == 0)
 272:	be 01       	movw	r22, r28
 274:	67 5f       	subi	r22, 0xF7	; 247
 276:	7f 4f       	sbci	r23, 0xFF	; 255
 278:	ce 01       	movw	r24, r28
 27a:	04 96       	adiw	r24, 0x04	; 4
 27c:	0e 94 ae 01 	call	0x35c	; 0x35c <strcmp>
 280:	89 2b       	or	r24, r25
 282:	09 f0       	breq	.+2      	; 0x286 <main+0x6e>
 284:	4d c0       	rjmp	.+154    	; 0x320 <main+0x108>
		{
			LCD_Command(0x01); // Clear LCD
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
			LCD_string(" ID:");
 28c:	8a ec       	ldi	r24, 0xCA	; 202
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 6f 00 	call	0xde	; 0xde <LCD_string>
			keypad_scan(userID, 2); // Get the 2-digit user ID
 294:	62 e0       	ldi	r22, 0x02	; 2
 296:	ce 01       	movw	r24, r28
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <keypad_scan>

			int found = 0;
			for (int i = 0; i < 4; i++)
 29e:	00 e0       	ldi	r16, 0x00	; 0
 2a0:	10 e0       	ldi	r17, 0x00	; 0
 2a2:	2f c0       	rjmp	.+94     	; 0x302 <main+0xea>
			{
				if (strcmp(userID, userInfo[i][0]) == 0)
 2a4:	84 e1       	ldi	r24, 0x14	; 20
 2a6:	80 9f       	mul	r24, r16
 2a8:	b0 01       	movw	r22, r0
 2aa:	81 9f       	mul	r24, r17
 2ac:	70 0d       	add	r23, r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2e e0       	ldi	r18, 0x0E	; 14
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	2c 0f       	add	r18, r28
 2b6:	3d 1f       	adc	r19, r29
 2b8:	62 0f       	add	r22, r18
 2ba:	73 1f       	adc	r23, r19
 2bc:	ce 01       	movw	r24, r28
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	0e 94 ae 01 	call	0x35c	; 0x35c <strcmp>
 2c4:	89 2b       	or	r24, r25
 2c6:	d9 f4       	brne	.+54     	; 0x2fe <main+0xe6>
				{
					LCD_Command(0x01); // Clear LCD
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
					PORTB=0b00000001;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	88 bb       	out	0x18, r24	; 24
					LCD_string(" Welcome ");
 2d2:	8f ec       	ldi	r24, 0xCF	; 207
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 6f 00 	call	0xde	; 0xde <LCD_string>
					LCD_string(userInfo[i][1]);
 2da:	24 e1       	ldi	r18, 0x14	; 20
 2dc:	20 9f       	mul	r18, r16
 2de:	c0 01       	movw	r24, r0
 2e0:	21 9f       	mul	r18, r17
 2e2:	90 0d       	add	r25, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	0a 96       	adiw	r24, 0x0a	; 10
 2e8:	2e e0       	ldi	r18, 0x0E	; 14
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	2c 0f       	add	r18, r28
 2ee:	3d 1f       	adc	r19, r29
 2f0:	82 0f       	add	r24, r18
 2f2:	93 1f       	adc	r25, r19
 2f4:	0e 94 6f 00 	call	0xde	; 0xde <LCD_string>
					found = 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
					break;
 2fc:	07 c0       	rjmp	.+14     	; 0x30c <main+0xf4>
			LCD_Command(0x01); // Clear LCD
			LCD_string(" ID:");
			keypad_scan(userID, 2); // Get the 2-digit user ID

			int found = 0;
			for (int i = 0; i < 4; i++)
 2fe:	0f 5f       	subi	r16, 0xFF	; 255
 300:	1f 4f       	sbci	r17, 0xFF	; 255
 302:	04 30       	cpi	r16, 0x04	; 4
 304:	11 05       	cpc	r17, r1
 306:	74 f2       	brlt	.-100    	; 0x2a4 <main+0x8c>
		{
			LCD_Command(0x01); // Clear LCD
			LCD_string(" ID:");
			keypad_scan(userID, 2); // Get the 2-digit user ID

			int found = 0;
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
					found = 1;
					break;
				}
			}

			if (!found)
 30c:	89 2b       	or	r24, r25
 30e:	79 f4       	brne	.+30     	; 0x32e <main+0x116>
			{
				LCD_Command(0xC0); // Clear LCD
 310:	80 ec       	ldi	r24, 0xC0	; 192
 312:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
				LCD_string(" ID Not Found");
 316:	89 ed       	ldi	r24, 0xD9	; 217
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 6f 00 	call	0xde	; 0xde <LCD_string>
 31e:	07 c0       	rjmp	.+14     	; 0x32e <main+0x116>
			}
		}
		else
		{
			LCD_Command(0xC0); // Clear LCD
 320:	80 ec       	ldi	r24, 0xC0	; 192
 322:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
			LCD_string(" Wrong Password");
 326:	87 ee       	ldi	r24, 0xE7	; 231
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 6f 00 	call	0xde	; 0xde <LCD_string>
 32e:	3f e3       	ldi	r19, 0x3F	; 63
 330:	8d e0       	ldi	r24, 0x0D	; 13
 332:	93 e0       	ldi	r25, 0x03	; 3
 334:	31 50       	subi	r19, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0x11c>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0x126>
 33e:	00 00       	nop
		}
		_delay_ms(1000);
        PORTB=0b00000000;
 340:	18 ba       	out	0x18, r1	; 24
 342:	2f e3       	ldi	r18, 0x3F	; 63
 344:	3d e0       	ldi	r19, 0x0D	; 13
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	21 50       	subi	r18, 0x01	; 1
 34a:	30 40       	sbci	r19, 0x00	; 0
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x130>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x13a>
 352:	00 00       	nop
		_delay_ms(1000); // Delay before the next loop iteration
		LCD_Command(0x01); // Clear LCD for the next input
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	}
 35a:	7f cf       	rjmp	.-258    	; 0x25a <main+0x42>

0000035c <strcmp>:
 35c:	fb 01       	movw	r30, r22
 35e:	dc 01       	movw	r26, r24
 360:	8d 91       	ld	r24, X+
 362:	01 90       	ld	r0, Z+
 364:	80 19       	sub	r24, r0
 366:	01 10       	cpse	r0, r1
 368:	d9 f3       	breq	.-10     	; 0x360 <strcmp+0x4>
 36a:	99 0b       	sbc	r25, r25
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
